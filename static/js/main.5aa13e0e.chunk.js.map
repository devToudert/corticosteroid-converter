{"version":3,"sources":["components/InputItem.jsx","components/InputList.jsx","components/Page.jsx","App.js","serviceWorker.js","index.js"],"names":["InputItem","props","Fragment","className","htmlFor","label","onChange","e","onDoseChange","target","value","dose","type","name","id","min","InputList","state","corticosteroid","equivalence","handleCtcChange","ctc","doseChange","updatedCorticosteroidState","map","c","result","Number","isNaN","parseFloat","Math","round","setState","this","key","Component","page","href","App","Page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRA6BeA,EA1BG,SAACC,GAKlB,OACC,kBAAC,IAAMC,SAAP,KACC,yBAAKC,UAAU,aACd,yBAAKA,UAAU,SACd,2BAAOC,QAAQ,OAAf,IAAuBH,EAAMI,MAA7B,MAED,yBAAKF,UAAU,SACd,2BACCG,SAZc,SAACC,GACnBN,EAAMO,aAAaD,EAAEE,OAAOC,QAYxBA,MAAOT,EAAMU,KACbC,KAAK,SACLC,KAAK,MACLC,GAAG,MACHC,IAAI,UCqDKC,E,4MA1DdC,MAAQ,CACPC,eAAgB,CACf,CAAEJ,GAAI,EAAGK,YAAa,EAAGd,MAAO,aAAcM,KAAM,GACpD,CAAEG,GAAI,EAAGK,YAAa,EAAGd,MAAO,YAAaM,KAAM,GACnD,CAAEG,GAAI,EAAGK,YAAa,EAAGd,MAAO,iBAAkBM,KAAM,GACxD,CAAEG,GAAI,EAAGK,YAAa,EAAGd,MAAO,eAAgBM,KAAM,GACtD,CACCG,GAAI,EACJK,YAAa,GACbd,MAAO,qBACPM,KAAM,IAEP,CAAEG,GAAI,EAAGK,YAAa,GAAKd,MAAO,gBAAiBM,KAAM,IACzD,CAAEG,GAAI,EAAGK,YAAa,GAAKd,MAAO,gBAAiBM,KAAM,IACzD,CAAEG,GAAI,EAAGK,YAAa,IAAMd,MAAO,gBAAiBM,KAAM,KAC1D,CAAEG,GAAI,EAAGK,YAAa,IAAMd,MAAO,gBAAiBM,KAAM,KAC1D,CAAEG,GAAI,GAAIK,YAAa,IAAMd,MAAO,cAAeM,KAAM,O,EAI3DS,gBAAkB,SAACC,EAAKC,GACvB,IAAIC,EAA0B,YAAO,EAAKN,MAAMC,gBAEhDK,EAA2BF,EAAIP,GAAK,GAAGH,KAAOW,EAI9CC,EAA2BC,KAAI,SAACC,GAC/B,IAAIC,EAAUL,EAAIV,KAAOU,EAAIF,YAAeM,EAAEN,YAC9C,OAAIQ,OAAOC,MAAMC,WAAWP,IACpB,GAGAG,EAAEd,KAAOmB,KAAKC,MAA2B,IAArBF,WAAWH,IAAiB,OAIzD,EAAKM,SAAS,CAAEd,eAAgBK,K,4CAKjC,WAAU,IAAD,OACR,OAAOU,KAAKhB,MAAMC,eAAeM,KAAI,SAACH,GACrC,OACC,kBAAC,EAAD,CACCa,IAAKb,EAAIP,GACTT,MAAOgB,EAAIhB,MACXM,KAAMU,EAAIV,KACVH,aAAc,SAACc,GAAD,OACb,EAAKF,gBAAgBC,EAAKC,a,GAnDRa,aCYTC,EAxBF,WACZ,OACC,oCACC,yBAAKjC,UAAU,UACd,wBAAIA,UAAU,SACb,2DAED,uBAAGA,UAAU,QAAb,iHAKD,yBAAKA,UAAU,iBACd,kBAAC,EAAD,OAED,4BAAQA,UAAU,gCACjB,sCACK,uBAAGkC,KAAK,kCAAR,kBCZMC,MAJf,WACE,OAAO,kBAACC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5aa13e0e.chunk.js","sourcesContent":["import React from 'react';\n\n// class InputItem extends Component {\nconst InputItem = (props) => {\n\tlet handleChange = (e) => {\n\t\tprops.onDoseChange(e.target.value);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"col-6 row\">\n\t\t\t\t<div className=\"col-8\">\n\t\t\t\t\t<label htmlFor=\"ctc\"> {props.label} </label>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-4\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tvalue={props.dose}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tname=\"ctc\"\n\t\t\t\t\t\tid=\"ctc\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default InputItem;\n","// import React from 'react';\n// import InputItem from './InputItem';\n\n// const inputList = () => {\n// \treturn (\n// \t\t<div className=\"container row\">\n// \t\t\t<InputItem />\n// \t\t</div>\n// \t);\n// };\n\n// export default inputList;\nimport React, { Component } from 'react';\nimport InputItem from './InputItem';\n\nclass InputList extends Component {\n\tstate = {\n\t\tcorticosteroid: [\n\t\t\t{ id: 1, equivalence: 1, label: 'PREDNISONE', dose: 1 },\n\t\t\t{ id: 2, equivalence: 5, label: 'CORTISONE', dose: 5 },\n\t\t\t{ id: 3, equivalence: 4, label: 'HYDROCORTISONE', dose: 4 },\n\t\t\t{ id: 4, equivalence: 1, label: 'PREDNISOLONE', dose: 1 },\n\t\t\t{\n\t\t\t\tid: 5,\n\t\t\t\tequivalence: 0.8,\n\t\t\t\tlabel: 'METHYLPREDNISOLONE',\n\t\t\t\tdose: 0.8,\n\t\t\t},\n\t\t\t{ id: 6, equivalence: 0.8, label: 'TRIAMCINOLONE', dose: 0.8 },\n\t\t\t{ id: 7, equivalence: 0.4, label: 'PARAMETHASONE', dose: 0.4 },\n\t\t\t{ id: 8, equivalence: 0.15, label: 'BETAMETHASONE', dose: 0.15 },\n\t\t\t{ id: 9, equivalence: 0.15, label: 'DEXAMETHASONE', dose: 0.15 },\n\t\t\t{ id: 10, equivalence: 0.06, label: 'CORTIVAZOLE', dose: 0.06 },\n\t\t],\n\t};\n\n\thandleCtcChange = (ctc, doseChange) => {\n\t\tlet updatedCorticosteroidState = [...this.state.corticosteroid];\n\t\t// TODO add parsFloat\n\t\tupdatedCorticosteroidState[ctc.id - 1].dose = doseChange;\n\n\t\t// ALGORITHM: dose calculée = dose du champs modifié / equivalence champs modifié * equivalence champs calculé\n\n\t\tupdatedCorticosteroidState.map((c) => {\n\t\t\tlet result = (ctc.dose / ctc.equivalence) * c.equivalence;\n\t\t\tif (Number.isNaN(parseFloat(doseChange))) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t// Deux nombres apres la virgule\n\t\t\treturn (c.dose = Math.round(parseFloat(result) * 100) / 100);\n\t\t});\n\n\t\t// Update state\n\t\tthis.setState({ corticosteroid: updatedCorticosteroidState });\n\t\t// console.log(`\n\t\t//     ctc.id = ${ctc.id} && ctc.label = ${ctc.label}  &&  doseChange = ${doseChange}\n\t\t// `);\n\t};\n\trender() {\n\t\treturn this.state.corticosteroid.map((ctc) => {\n\t\t\treturn (\n\t\t\t\t<InputItem\n\t\t\t\t\tkey={ctc.id}\n\t\t\t\t\tlabel={ctc.label}\n\t\t\t\t\tdose={ctc.dose}\n\t\t\t\t\tonDoseChange={(doseChange) =>\n\t\t\t\t\t\tthis.handleCtcChange(ctc, doseChange)\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport default InputList;\n","import React from 'react';\nimport InputList from './InputList';\n\nconst page = () => {\n\treturn (\n\t\t<>\n\t\t\t<div className=\"header\">\n\t\t\t\t<h1 className=\"title\">\n\t\t\t\t\t<span>CORTICOSTEROID CONVERTER</span>\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"head\">\n\t\t\t\t\tCette application permet de calculer les doses équivalentes\n\t\t\t\t\tdes differentes familles de corticosteroides.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"container row\">\n\t\t\t\t<InputList />\n\t\t\t</div>\n\t\t\t<footer className=\"footer text-center copyright\">\n\t\t\t\t<small>\n\t\t\t\t\tBy @<a href=\"https://twitter.com/devtoudert\">DevToudert</a>\n\t\t\t\t</small>\n\t\t\t</footer>\n\t\t</>\n\t);\n};\n\nexport default page;\n","import React from 'react';\nimport './App.css';\nimport Page from './components/Page';\n\nfunction App() {\n  return <Page / >\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}